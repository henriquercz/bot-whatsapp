import 'dotenv/config';
import path from 'path';
import { fileURLToPath } from 'url';
import logger from './utils/logger.js';
import { initializeDatabase } from './database/db.js';
import { startWhatsAppClient } from './whatsapp/client.js';
import { MessageHandler } from './whatsapp/messageHandler.js';
import { GeminiAI } from './ai/gemini.js';
import { ChatConfigManager } from './database/chatConfig.js';
import { ConversationMemory } from './memory/conversationMemory.js';

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

// Configurar encoding UTF-8 para Windows
if (process.platform === 'win32') {
  try {
    // Tentar configurar o console do Windows para UTF-8
    if (process.stdout && process.stdout.setEncoding) {
      process.stdout.setEncoding('utf8');
    }
    if (process.stderr && process.stderr.setEncoding) {
      process.stderr.setEncoding('utf8');
    }
  } catch (e) {
    // Ignorar erros de configura√ß√£o de encoding
  }
}

async function main() {
  try {
    logger.info('üöÄ Iniciando WhatsApp AI Bot...');
    
    // 1. Inicializar banco de dados
    const db = initializeDatabase(process.env.DB_PATH || './data/database.sqlite');
    logger.info('‚úÖ Banco de dados inicializado');
    
    // 2. Carregar configura√ß√µes
    const chatConfig = new ChatConfigManager(process.env.CHATS_CONFIG_PATH || './config/chats.json');
    logger.info(`‚úÖ Configura√ß√£o carregada. Chats autorizados: ${chatConfig.config.authorizedChats.length}`);
    
    // 3. Inicializar IA
    const geminiAI = new GeminiAI(process.env.GEMINI_API_KEY);
    logger.info('‚úÖ Gemini AI inicializado');
    
    // 4. Inicializar mem√≥ria
    const memory = new ConversationMemory(db);
    logger.info('‚úÖ Mem√≥ria de conversa√ß√£o inicializada');
    
    // 5. Iniciar cliente WhatsApp
    const sock = await startWhatsAppClient();
    logger.info('‚úÖ Cliente WhatsApp iniciado');
    
    // 6. Configurar handlers de mensagem
    const messageHandler = new MessageHandler(
      sock,
      geminiAI,
      memory,
      chatConfig
    );
    
    console.log('\n\nüöÄüöÄüöÄ REGISTRANDO LISTENER DE MENSAGENS üöÄüöÄüöÄ\n\n');
    
    // Listener de mensagens (BAILEYS 7.0 formato correto)
    sock.ev.on('messages.upsert', async ({ type, messages }) => {
      console.log('\n\nüì¨üì¨üì¨ MENSAGEM RECEBIDA (messages.upsert)! üì¨üì¨üì¨\n\n');
      logger.info('‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê');
      logger.info(`üì¨ EVENTO messages.upsert RECEBIDO!`);
      logger.info(`üìä Total de mensagens: ${messages.length}`);
      logger.info(`üìã Tipo do evento: ${type}`);
      logger.info('‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê');
      
      // Baileys 7.0: processar apenas mensagens "notify" (novas)
      if (type === 'notify') {
        for (const msg of messages) {
          logger.info('‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ');
          logger.info('‚îÇ üì§ PROCESSANDO MENSAGEM NOVA...');
          logger.info(`‚îÇ üí¨ Key: ${JSON.stringify(msg.key)}`);
          logger.info(`‚îÇ üìù Message: ${JSON.stringify(msg.message)}`);
          logger.info('‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ');
          
          try {
            await messageHandler.handleIncomingMessage(msg);
          } catch (error) {
            logger.error('‚ùå ERRO ao processar mensagem:', error);
          }
        }
      } else {
        logger.info(`‚è© Ignorando mensagens antigas (type: ${type})`);
      }
    });
    
    console.log('\n\n‚úÖ‚úÖ‚úÖ LISTENER REGISTRADO COM SUCESSO ‚úÖ‚úÖ‚úÖ\n\n');
    console.log('üîç Aguardando eventos... Envie uma mensagem para teste!\n');
    logger.info('ü§ñ Bot pronto para receber mensagens!');
    logger.info('üìù Envie uma mensagem para qualquer chat para testar');
    logger.info('‚öôÔ∏è Use !authorize em um chat para autorizar respostas autom√°ticas');
    
  } catch (error) {
    logger.error('‚ùå Erro fatal ao iniciar bot:', error);
    console.error('Stack trace completo:', error);
    process.exit(1);
  }
}

// Tratamento de sinais para shutdown gracioso
process.on('SIGINT', () => {
  logger.info('‚èπÔ∏è Encerrando bot graciosamente...');
  process.exit(0);
});

process.on('SIGTERM', () => {
  logger.info('‚èπÔ∏è Encerrando bot graciosamente...');
  process.exit(0);
});

// Tratamento de erros n√£o capturados
process.on('unhandledRejection', (error) => {
  logger.error('‚ùå Erro n√£o tratado (Promise):', error);
});

process.on('uncaughtException', (error) => {
  logger.error('‚ùå Erro n√£o capturado (Exception):', error);
  process.exit(1);
});

main().catch(logger.error);
